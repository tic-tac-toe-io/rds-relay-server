
#
# Web (expressjs) settings.
#
web:
  port: 6030
  api: [3, 1]
  upload_storage: memory
  upload_path: "{{work_dir}}/web/upload/{{process_name}}"

#
# DO NOT USE any handlebars template variables (e.g. process_name) in logger
# section because they are never merged.
#
logger:
  rotating_file_stream:
    period: daily
    threshold: 1g     # The maximum size for a log file to reach before it's rotated.
    totalFiles: 60    # Keep 60 days (2 months) of log files.


#
# Builtin Authentication
#
auth:
  userdb:
    agent:
      test1: token1
      test2: token2
    system:
      sys1: token1
      sys2: token2


#
# Agent manager.
#
agent-manager:
  name: wstty.tic-tac-toe.io


#
# Channel: `tty`, socket.io namespace for connections from agents on the boards/workstations.
#
ws-tty:
  verbose: no


#
# Channel: `terminal`, socket.io namespace for connections from terminals in web browsers.
#
ws-terminal:
  #
  # There are 2 authentication methods for socket.io namespace.
  #
  #   1. userdb from auth module.
  #   2. external javascript module as authentication callback
  #
  # For `1`, the `authentication` is configured as an URL with scheme `userdb`
  # and hostname that indicates the group of users to be used. For example,
  # when you configure `auth` module as below:
  #
  #   auth:
  #     userdb:
  #       agent:
  #         test1: token1
  #         test2: token2
  #        xxx:
  #         abc: def
  #         xyz: www
  #
  # And configure the authentication as `userdb://xxx`, then, it indicates
  # to use the 2 users `abc` and `xyz` in above configurations.
  #
  #   ws-terminal:
  #     authentication: userdb://xxx
  #
  # For `2`, the `authentication` is configured to file scheme URL with
  # the full path of a javascript module that will be loaded to verify
  # username and password. It's expected that javascript module exports a
  # function as below:
  #
  #     module.exports = exports = function(socket, username, password, done) {
  #       return done(null, true);
  #     }
  #
  # The callback function `done` has 2 parameters. 1st parameter is the error
  # object, and 2nd parameter is a boolean value to indicate the user is
  # authenticated or not. Please note, the host of the given URL shall be
  # empty, and here is an example:
  #
  #     authentication: file:///tmp/aa.js
  #
  authentication: userdb://agent


#
# Channel: `system`, socket.io namespace for connections from 3rd-party cloud apps.
#
ws-system:
  #
  # There are 2 authentication methods for socket.io namespace.
  #
  #   1. userdb from auth module.
  #   2. external javascript module as authentication callback
  #
  # For `1`, the `authentication` is configured as an URL with scheme `userdb`
  # and hostname that indicates the group of users to be used. For example,
  # when you configure `auth` module as below:
  #
  #   auth:
  #     userdb:
  #       agent:
  #         test1: token1
  #         test2: token2
  #        xxx:
  #         abc: def
  #         xyz: www
  #
  # And configure the authentication as `userdb://xxx`, then, it indicates
  # to use the 2 users `abc` and `xyz` in above configurations.
  #
  #   ws-terminal:
  #     authentication: userdb://xxx
  #
  # For `2`, the `authentication` is configured to file scheme URL with
  # the full path of a javascript module that will be loaded to verify
  # username and password. It's expected that javascript module exports a
  # function as below:
  #
  #     module.exports = exports = function(socket, username, password, done) {
  #       return done(null, true);
  #     }
  #
  # The callback function `done` has 2 parameters. 1st parameter is the error
  # object, and 2nd parameter is a boolean value to indicate the user is
  # authenticated or not. Please note, the host of the given URL shall be
  # empty, and here is an example:
  #
  #     authentication: file:///tmp/aa.js
  #
  authentication: userdb://system



webapi-agent:
  enabled: true
  authentication: userdb://agent


http-by-server:
  v1:
    timeout: 180 # seconds


bash-by-server:
  v1:
    timeout: 180 # seconds
    configs:
      uuid: true
    parameters:
      command: null
      args: []
      options:
        cwd: /tmp
        env: {}
        shell: true

