// Generated by LiveScript 1.6.1
(function(){
  var GeoLocation, AgentPanel, AgentsContainer, ProfilePanel, buttonOnclickCurrying, AgentDashboard, ContextManager, TerminalPanel, opts, xs;
  GeoLocation = (function(){
    GeoLocation.displayName = 'GeoLocation';
    var prototype = GeoLocation.prototype, constructor = GeoLocation;
    function GeoLocation(geodata){
      var x;
      this.geodata = geodata;
      this.ip = '0.0.0.0';
      this.country_flag_emoji = "";
      this.region_name = 'Unknown';
      this.country_name = 'Unknown';
      this.continent_name = 'Unknown';
      this.latitude = 0.0;
      this.longitude = 0.0;
      this.time_zone_id = "Unknown/Unknown";
      this.time_zone_code = "GMT+0";
      if (geodata == null) {
        return;
      }
      if (geodata.data == null) {
        return;
      }
      if (!geodata.data['ipstack.com']) {
        return;
      }
      if (geodata.ip != null) {
        this.ip = geodata.ip;
      }
      x = geodata.data['ipstack.com'];
      if (x.location.country_flag_emoji != null) {
        this.country_flag_emoji = x.location.country_flag_emoji;
      }
      if (x.region_name != null) {
        this.region_name = x.region_name;
      }
      if (x.country_name != null) {
        this.country_name = x.country_name;
      }
      if (x.continent_name != null) {
        this.continent_name = x.continent_name;
      }
      if (x.latitude != null) {
        this.latitude = x.latitude;
      }
      if (x.longitude != null) {
        this.longitude = x.longitude;
      }
      if (x.time_zone.id != null) {
        this.time_zone_id = x.time_zone.id;
      }
      if (x.time_zone.code != null) {
        this.time_zone_code = x.time_zone.code;
      }
    }
    return GeoLocation;
  }());
  AgentPanel = (function(){
    AgentPanel.displayName = 'AgentPanel';
    var prototype = AgentPanel.prototype, constructor = AgentPanel;
    function AgentPanel(data, index){
      this.data = data;
      this.index = index;
      return;
    }
    AgentPanel.prototype.render = function(){
      var ref$, ttt, id, runtime, iface, os, uid, cc, uptime, geoip, ipv4, mac, software_version, socketio_version, protocol_version, profile, profile_version, sn, node_version, node_arch, node_platform, geo, sio, vinfo, hostname, cid, hid, pid, collapseStyle;
      ref$ = this.data, ttt = ref$.ttt, id = ref$.id, runtime = ref$.runtime, iface = ref$.iface, os = ref$.os, uid = ref$.uid, cc = ref$.cc, uptime = ref$.uptime, geoip = ref$.geoip;
      ipv4 = cc.ipv4, mac = cc.mac, software_version = cc.software_version, socketio_version = cc.socketio_version, protocol_version = cc.protocol_version;
      profile = ttt.profile, profile_version = ttt.profile_version, sn = ttt.sn;
      node_version = runtime.node_version, node_arch = runtime.node_arch, node_platform = runtime.node_platform;
      geo = new GeoLocation(geoip);
      sio = "";
      if (socketio_version != null && socketio_version !== "unknown") {
        sio = ", sio-" + socketio_version;
      }
      vinfo = profile_version;
      if (software_version != null && software_version !== "unknown") {
        vinfo = profile_version + " (<small>" + software_version + "</small>)";
      }
      uptime = humanizeDuration(uptime, {
        largest: 3,
        round: true,
        units: ['y', 'mo', 'w', 'd', 'h', 'm', 's']
      });
      hostname = os.hostname;
      cid = "collapse_" + id;
      hid = "heading_" + id;
      pid = "accordion_" + profile;
      if (!(sn != null && sn !== "")) {
        sn = hostname;
      }
      collapseStyle = "collapse in";
      return "<div class=\"panel panel-default\">\n  <div class=\"panel-heading\" role=\"tab\" id=\"" + hid + "\">\n    <h4 class=\"panel-title\">\n      <a role=\"button\" data-toggle=\"collapse\" data-parent=\"#" + pid + "\" href=\"#" + cid + "\" aria-expanded=\"true\" aria-controls=\"" + cid + "\">\n        " + id + " (" + sn + ")\n      </a>\n    </h4>\n  </div>\n  <div id=\"" + cid + "\" class=\"panel-collapse " + collapseStyle + "\" role=\"tabpanel\" aria-labelledby=\"" + hid + "\">\n    <div class=\"panel-body\">\n      <table class=\"table table-hover\">\n        <tbody>\n          <tr><td>system</td><td>\n            <small>\n              <p>hostname: <strong>" + hostname + "</strong></p>\n              <p>private: <strong>" + ipv4 + "</strong></p>\n              <p>public: <strong>" + geo.ip + "</strong></p>\n              <p>uptime: " + uptime + "</p>\n            </small>\n            </td>\n            <td><small>\n              <p>" + node_platform + "-" + node_arch + "</p>\n              <p>" + mac + "</p>\n              <p>" + geo.country_flag_emoji + " " + geo.region_name + ", " + geo.country_name + ", " + geo.continent_name + " (<a href=\"https://maps.google.com?z=14&ll=" + geo.latitude + "," + geo.longitude + "\">map</a>)</p>\n              <p>" + geo.time_zone_id + " (<strong>" + geo.time_zone_code + "</strong>)</p>\n            </small></td>\n            </tr>\n          <tr><td>configurations</td><td>\n            <small>\n              <p>profile: <strong>" + profile_version + "</strong></p>\n              <p>app: <strong>" + software_version + "</strong></p>\n              <p>nodejs: <strong>" + node_version + "</strong></p>\n              <p>socket.io: " + socketio_version + "</p>\n            </small>\n            </td>\n            <td><small>\n              <p>" + protocol_version + "</p>\n            </small></td>\n            </tr>\n          <tr><td></td><td></td><td></td></tr>\n        </tbody>\n      </table>\n      <button class=\"btn btn-info btn-xs\" id=\"agent_button_console_" + uid + "\">\n        <span class=\"glyphicon glyphicon-log-in\" aria-hidden=\"true\"></span>\n        Console\n      </button>\n      <button class=\"btn btn-warning btn-xs\" id=\"agent_button_reboot_" + uid + "\" disabled=\"disabled\">\n        <span class=\"glyphicon glyphicon-refresh\" aria-hidden=\"true\"></span>\n        Reboot\n      </button>\n      <button class=\"btn btn-success btn-xs\" id=\"agent_button_upgrade_" + uid + "\" disabled=\"disabled\">\n        <span class=\"glyphicon glyphicon-upload\" aria-hidden=\"true\"></span>\n        Upgrade\n      </button>\n    </div>\n  </div>\n</div>";
    };
    return AgentPanel;
  }());
  AgentsContainer = (function(){
    AgentsContainer.displayName = 'AgentsContainer';
    var prototype = AgentsContainer.prototype, constructor = AgentsContainer;
    function AgentsContainer(agentPanels, profile){
      this.agentPanels = agentPanels;
      this.profile = profile;
      return;
    }
    AgentsContainer.prototype.render = function(){
      var agentPanels, profile, pid, panels, res$, id, a;
      agentPanels = this.agentPanels, profile = this.profile;
      pid = "accordion_" + profile;
      res$ = [];
      for (id in agentPanels) {
        a = agentPanels[id];
        res$.push(a.render());
      }
      panels = res$;
      return "<div class=\"panel-group\" id=\"" + pid + "\" role=\"tablist\" aria-multiselectable=\"true\">\n  " + panels.join('\n') + "\n</div>";
    };
    return AgentsContainer;
  }());
  ProfilePanel = (function(){
    ProfilePanel.displayName = 'ProfilePanel';
    var prototype = ProfilePanel.prototype, constructor = ProfilePanel;
    function ProfilePanel(profile, agents, active){
      var res$, i$, len$;
      this.profile = profile;
      this.agents = agents;
      this.active = active;
      res$ = [];
      for (i$ = 0, len$ = agents.length; i$ < len$; ++i$) {
        res$.push((fn$.call(this, i$, agents[i$])));
      }
      this.agentPanels = res$;
      this.agentContainer = new AgentsContainer(this.agentPanels, profile);
      return;
      function fn$(i, a){
        return new AgentPanel(a, i);
      }
    }
    ProfilePanel.prototype.renderTab = function(){
      var agentContainer, active, profile, activeClass;
      agentContainer = this.agentContainer, active = this.active, profile = this.profile;
      activeClass = active ? "active" : "";
      return "<li class=\"" + activeClass + "\" role=\"presentation\">\n  <a href=\"#" + profile + "\" aria-controls=\"" + profile + "\" data-toggle=\"tab\" role=\"tab\">\n    " + profile + "\n  </a>\n</li>";
    };
    ProfilePanel.prototype.renderPanel = function(){
      var agentContainer, active, profile, activeClass;
      agentContainer = this.agentContainer, active = this.active, profile = this.profile;
      activeClass = active ? "active" : "";
      return "<div class=\"tab-pane " + activeClass + "\" id=\"" + profile + "\" role=\"tabpanel\">\n  " + agentContainer.render() + "\n</div>";
    };
    return ProfilePanel;
  }());
  buttonOnclickCurrying = curry$(function(uid, action, dummy){
    return window.context.performAction(uid, action);
  });
  AgentDashboard = (function(){
    AgentDashboard.displayName = 'AgentDashboard';
    var prototype = AgentDashboard.prototype, constructor = AgentDashboard;
    function AgentDashboard(context){
      var profilePanels, profiles, firstActive, name, p, pp;
      this.context = context;
      profilePanels = this.profilePanels = [];
      profiles = context.profiles;
      firstActive = true;
      for (name in profiles) {
        p = profiles[name];
        console.log(name + " profile-panel: " + firstActive);
        pp = new ProfilePanel(name, p, firstActive);
        profilePanels.push(pp);
        if (firstActive) {
          firstActive = false;
        }
      }
      return;
    }
    AgentDashboard.prototype.render = function(){
      var profilePanels, tabs, res$, i$, len$, pp, tabHead, panels, tabBody;
      profilePanels = this.profilePanels;
      res$ = [];
      for (i$ = 0, len$ = profilePanels.length; i$ < len$; ++i$) {
        pp = profilePanels[i$];
        res$.push(pp.renderTab());
      }
      tabs = res$;
      tabHead = "<ul class=\"nav nav-tabs\" role=\"tablist\">\n  " + tabs.join('\n') + "\n</ul>";
      res$ = [];
      for (i$ = 0, len$ = profilePanels.length; i$ < len$; ++i$) {
        pp = profilePanels[i$];
        res$.push(pp.renderPanel());
      }
      panels = res$;
      tabBody = "<div class=\"tab-content\">\n  " + panels.join('\n') + "\n</div>";
      return tabHead + tabBody;
    };
    AgentDashboard.prototype.show = function(){
      var text, ads, ad, buttons, i$, len$, b, id, tokens, action, uid, f, results$ = [];
      text = this.render();
      ads = $("#agent-dashboard");
      ad = ads[0];
      ad.innerHTML = text;
      buttons = $("[id^=agent_button]");
      for (i$ = 0, len$ = buttons.length; i$ < len$; ++i$) {
        b = buttons[i$];
        id = b.id;
        tokens = id.split('_');
        action = tokens[2];
        uid = parseInt(tokens[3]);
        f = buttonOnclickCurrying(uid, action);
        results$.push(b.onclick = f);
      }
      return results$;
    };
    return AgentDashboard;
  }());
  ContextManager = (function(){
    ContextManager.displayName = 'ContextManager';
    var prototype = ContextManager.prototype, constructor = ContextManager;
    function ContextManager(data){
      this.data = data;
      this.profiles = {};
      this.profileList = [];
      return;
    }
    ContextManager.prototype.processData = function(){
      var profiles, profileList, agentPanels, data, i$, len$, results$ = [];
      profiles = this.profiles, profileList = this.profileList, agentPanels = this.agentPanels, data = this.data;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        results$.push((fn$.call(this, i$, data[i$])));
      }
      return results$;
      function fn$(i, a){
        var system, cc, uptime, geoip, ttt, id, runtime, iface, profile, profile_version, node_version, node_arch, ref$, ipv4, mac, xs;
        system = a.system, cc = a.cc, uptime = a.uptime, geoip = a.geoip;
        ttt = system.ttt, id = system.id, runtime = system.runtime, iface = system.iface;
        profile = ttt.profile, profile_version = ttt.profile_version;
        node_version = runtime.node_version, node_arch = runtime.node_arch;
        if (iface != null && iface.iface != null) {
          ref$ = iface.iface, ipv4 = ref$.ipv4, mac = ref$.mac;
        } else {
          ipv4 = "unknown";
          mac = "unknown";
        }
        console.log("uptime: " + uptime + ", cc => " + JSON.stringify(cc));
        console.log("system => " + JSON.stringify(system));
        xs = import$({}, system);
        xs.cc = cc;
        xs.uid = i;
        xs.uptime = uptime;
        xs.geoip = geoip;
        profileList.push(profile);
        if (profiles[profile] == null) {
          profiles[profile] = [];
        }
        return profiles[profile].push(xs);
      }
    };
    ContextManager.prototype.performAction = function(uid, action){
      var a, id, system, hostname, xs, lms;
      a = this.data[uid];
      id = a.id, system = a.system;
      hostname = system.os.hostname;
      xs = $('#login-agent-id');
      xs[0].value = id;
      xs = $('#login-modal-label');
      xs[0].innerHTML = "Login " + hostname;
      lms = $('#loginModal');
      lms.modal();
      return console.log("button[" + id + "] => " + action);
    };
    return ContextManager;
  }());
  TerminalPanel = (function(){
    TerminalPanel.displayName = 'TerminalPanel';
    var prototype = TerminalPanel.prototype, constructor = TerminalPanel;
    function TerminalPanel(id, username, password, cols, rows){
      this.id = id;
      this.username = username;
      this.password = password;
      this.cols = cols;
      this.rows = rows;
      this.performed = false;
      this.delayDestroy = false;
      this.delayMs = 5000;
      return;
    }
    TerminalPanel.prototype.perform = function(){
      var self, id, username, password, cols, rows, xs, REQ_TTY, term, ref$, pathname, host, protocol, url, s;
      if (this.performed) {
        return;
      }
      self = this;
      this.performed = true;
      id = this.id, username = this.username, password = this.password, cols = this.cols, rows = this.rows;
      xs = $('#term-container');
      xs[0].hidden = false;
      xs = $('#terminal-title');
      xs[0].innerHTML = id + "";
      REQ_TTY = {
        type: 'req-tty',
        params: {
          type: 'pty',
          options: {
            cols: cols,
            rows: rows
          }
        }
      };
      xs = $('#term');
      document.title = id + " terminal";
      document.term = term = new Terminal({
        cols: cols,
        rows: rows,
        useStyle: true,
        screenKeys: true,
        cursorBlink: true
      });
      console.log("term = " + term);
      term.open(xs[0]);
      term.write("\x1b[31mWelcome to " + id + "\x1b[m\r\n");
      ref$ = window.location, pathname = ref$.pathname, host = ref$.host, protocol = ref$.protocol;
      url = protocol + "//" + host + "/terminal";
      console.log("websocket is connecting to " + url);
      s = io.connect(url);
      s.on('connect', function(){
        console.log("websocket is connected");
        return s.emit('authentication', {
          username: username,
          password: password
        });
      });
      term.onData(function(data){
        return s.emit('tty', data);
      });
      term.focus();
      s.on('tty', function(chunk){
        return document.term.write(chunk);
      });
      s.on('authenticated', function(){
        term.write("accepted user: \x1b[33m" + username + "\x1b[m\r\n");
        console.log("websocket is authenticated");
        REQ_TTY.id = id;
        return s.emit('command', JSON.stringify(REQ_TTY));
      });
      s.on('err', function(err){
        term.write("unexpected error: \x1b[34m" + err + "\x1b[m\r\n");
        term.write("the page will be reload in 20s...\r\n");
        s.disconnect();
        self.delayMs = 20000;
        return self.delayDestroy = true;
      });
      s.on('unauthorized', function(err){
        console.log("websocket is unauthorized, err: " + err);
        term.write("invalid username or password, reload the page in 5 seconds\r\n");
        return self.delayDestroy = true;
      });
      return s.on('disconnect', function(){
        var delayDestroy, delayMs, f;
        delayDestroy = self.delayDestroy, delayMs = self.delayMs;
        f = function(){
          document.term.dispose();
          return location.reload(true);
        };
        if (delayDestroy) {
          return setInterval(f, delayMs);
        } else {
          return f();
        }
      });
    };
    return TerminalPanel;
  }());
  opts = {
    url: '/api/v1/a/agents?format=advanced'
  };
  $.ajax(opts).success(function(data, textStatus, xhr){
    var context, agentDashboard;
    data = window.aaa = data.data;
    context = window.context = new ContextManager(data);
    context.processData();
    agentDashboard = window.agentDashboard = new AgentDashboard(context);
    return agentDashboard.show();
  });
  xs = $('#term-container');
  xs[0].hidden = true;
  xs = $('#login-button');
  xs[0].onclick = function(){
    var xs, agentId, username, password, cols, rows, lms, terminal;
    xs = $('#login-agent-id');
    agentId = xs[0].value;
    xs = $('#login-username');
    username = xs[0].value;
    xs = $('#login-password');
    password = xs[0].value;
    xs = $('#login-term-cols');
    cols = parseInt(xs[0].value);
    xs = $('#login-term-rows');
    rows = parseInt(xs[0].value);
    console.log("login " + agentId + " with username `" + username + "` and password `" + password + "`");
    lms = $('#loginModal');
    lms.modal('hide');
    xs = $('#dashboard');
    xs[0].hidden = true;
    terminal = window.terminal = new TerminalPanel(agentId, username, password, cols, rows);
    return terminal.perform();
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
